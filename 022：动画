。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
。。                     不使用动画                            。。
。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="js/vue.js"></script>
</head>

<body>
    <div id="app">
        <input type="button" value="toogle" @click="flag = !flag">
        <h3 v-if="flag">这是一个h3</h3>
    </div>
    <script>
        var vm=new Vue({
           el:'#app',
           data: {
               flag: false
           },
           methods: {}
        });
    </script>
</body>

</html>

---------------------------------------------------------------------------------------------------------------

。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
。。                     使用过渡类名实现动画                   。。
。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="js/vue.js"></script>
    <!-- 2.自定义两组样式，来控制 transition 内部的元素实现动画 -->
    <style>
        .v-enter,
        .v-leave-to{
            opacity: 0;
            transform: translateX(150px);
        }

        .v-enter-active,
        .v-leave-active{
            transition: all 0.8s ease;
        }


        .my-enter,
        .my-leave-to{
            opacity: 0;
            transform: translateY(250px);
        }

        .my-enter-active,
        .my-leave-active{
            transition: all 1.4s ease;
        }
    </style>

</head>

<body>
    <div id="app">
        <input type="button" value="toogle" @click="flag = !flag">
        

        <!-- 1.使用 transition 元素，把需要被动画控制的元素，包裹起来 -->

        <transition name="" mode="">
            <h3 v-if="flag">这是一个h3</h3>
        </transition>

        <hr>

        <!-- name 可以区分不同组之间的动画 -->
        <transition name="my" mode=""> 
            <h3 v-if="flag">这是一个h2</h3>
        </transition>

    </div>
    <script>
        var vm=new Vue({
           el:'#app',
           data: {
               flag: false
           },
           methods: {}
        });
    </script>
</body>

</html>

-------------------------------------------------------------------------------------------------------------------------
。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
。。                    使用第三方类实现动画                    。。
。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="js/vue.js"></script>
    <link rel="stylesheet" href="/css/animate.min.css">
</head>

<body>
    <div id="app">
        <input type="button" value="toogle" @click="flag = !flag">
        <transition enter-active-class="animated bounceIn" leave-active-class="animated bounceOut" :duration="{ enter: 200, leave: 400 }">
            <!-- 使用 :duration 来分别设置 入场时长 和 离场时长 -->
            <h3 v-if="flag">这是一个h3</h3>
        </transition>
    </div>
    <script>
        var vm=new Vue({
            el:'#app',
            data: {
                flag: false
            },
            methods: {}
        });
    </script>
</body>
    
    

</html>


-------------------------------------------------------------------------------------------------------------------------
。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
。。                 使用钩子函数模拟小球半场动画               。。
。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="js/vue.js"></script>
    <style>
        .ball{
            width: 15px;
            height: 15px;
            border-radius: 50%;
            background-color: red;
        }
    </style>
</head>

<body>
    <div id="app">
        <input type="button" value="按钮" @click="flag = !flag">
        <transition 
            @before-enter="beforeEnter"
            @enter="enter"
            @after-enter="afterEnter">
            <div class="ball" v-show="flag"></div>
        </transition>
    </div>
    <script>
        var vm=new Vue({
           el:'#app',
           data: {
               flag: false
           },
           methods: {
               //el 表示 要执行动画的那个 DOM 元素
               beforeEnter(el){
                   //beforeEnter 表示动画入场之前，此时，动画尚未开始，可以 在 beforeEnter 中，设置元素开始动画之前的起始样式
                   //设置小球开始动画之前的，起始位置
                   el.style.transform = "translate(0, 0)"
               },
               enter(el,done){ //done 指的是 afterEnter 函数（这是必须写的， enter 执行完后立即执行 done
                   el.offsetWidth//这句话无实际作用，但是如果不写，出不来动画效果；可以认为 el.offsetWidth 会强制动画刷新
                   //enter 表示 动画开始之后的样式，这里，可以设置小球完成之后的结束状态
                   el.style.transform = "translate(150px, 450px)"
                   el.style.transition = 'all 1s ease'
                   done()
               },
               afterEnter(el){
                   this.flag = !this.flag
               }
           }
        });
    </script>
</body>

</html>

-------------------------------------------------------------------------------------------------------------------------
。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
。。                          列表动画                         。。
。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="js/vue.js"></script>
    <style>
        li{
            border: 1px dashed #999;
            margin: 5px;
            line-height: 35px;
            padding-left: 5px;
            font-size: 12px;
            width: 100%;
        }

        .v-enter,
        .v-leave-to{
            opacity: 0;
            transform: translateY(80px);
        }
        .v-enter-active,
        .v-leave-active{
            transition: all 0.6s ease;
        }

        li:hover{
            background-color: hotpink;
            transition: all 0.4s ease;
        }

        /* 下面的 v-move 和 v-leave-active 配合使用，能够实现列表后续的元素，渐渐地飘上来的效果 */
        .v-move { 
            /* 设置元素位移的时候的动画 */
            transition: all 0.6s ease;
        }
        .v-leave-active {
            position: absolute;
        }
    </style>
</head>

<body>
    <div id="app">
        <div>
            <label for="">
                Id:
                <input type="text" v-model="id">
            </label>

            <label for="">
                Name:
                <input type="text" v-model="name">
            </label>
            
            <input type="button" @click="add" value="添加">
            
        </div>
        <ul>
            <!-- 在实现列表过渡的时候，如果需要过渡的元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup -->
            <transition-group tag="" name="">
                <li v-for="(item, i) in list" :key="item.id" @click="del(i)">
                    {{ item.id }}--{{ item.name }}
                </li>
            </transition-group>
        </ul>
    </div>
    <script>
        var vm=new Vue({
           el:'#app',
           data: {
               id: '',
               name: '',
               list: [
                   { id: 1, name: 'aa' },
                   { id: 2, name: 'bb' },
                   { id: 3, name: 'cc' },
                   { id: 4, name: 'dd' },
               ]
           },
           methods: {
               add () {
                 this.list.push({ id: this.id, name: this.name })
                 this.id = this.name = ''
               },
               del (i) {
                 this.list.splice(i, 1)
               }
           }
        });
    </script>
</body>

</html>
