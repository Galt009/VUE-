名称案例（绑定 keyup）
----------------------------------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="js/vue.js"></script>
</head>

<body>
    <div id="app">

        <input type="text" v-model="firstname" @keyup="getFullname"> +
        <input type="text" v-model="lastname" @keyup="getFullname"> =
        <input type="text" v-model="fullname">

    </div>
    <script>
        var vm=new Vue({
           el:'#app',
           data: {
               firstname: '',
               lastname: '',
               fullname: ''
           },
           methods: {
               getFullname () {
                   this.fullname = this.firstname + '-' +this.lastname
               }
           }
        });
    </script>
</body>

</html>

名称案例（watch监听）
--------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="js/vue.js"></script>
</head>

<body>
    <div id="app">

        <input type="text" v-model="firstname"> +
        <input type="text" v-model="lastname"> =
        <input type="text" v-model="fullname">

    </div>
    <script>
        var vm=new Vue({
           el:'#app',
           data: {
               firstname: '',
               lastname: '',
               fullname: ''
           },
           methods: {},
           watch: { //使用这个属性，可以监视 data 中指定数据的变化，然后触发这个 watch 中对应的 function 函数
                // firstname: function () {
                //     this.fullname = this.firstname + "-" + this.lastname
                // },
                // lastname: function () {
                //     this.fullname = this.firstname + "-" + this.lastname
                // }

                firstname: function (newVal, oldVal) { //最新值，旧值
                    this.fullname = newVal + "-" + this.lastname 
                },

                lastname: function (newVal, oldVal) {
                    this.fullname = this.firstname + "-" + newVal 
                }
           }
           
        });
    </script>
</body>

</html>


watch 监听路由地址的改变
----------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="js/vue.js"></script>
    <script src="js/vue-router.js"></script>
</head>

<body>
    <div id="app">
        <router-link to="/login">login</router-link>
        <router-link to="/register">register</router-link>
        <router-view></router-view>
    </div>
    <script>

        var login = {
            template: '<h1>login</h1>'
        }
        var register = {
            template: '<h1>register</h1>'
        }

        var router = new VueRouter({
            routes: [
                { path: '/', redirect: '/login'},
                { path: '/login', component: login },
                { path: '/register', component: register }
            ],
            linkActiveClass: 'myactive' //和激活相关的类
        })
        var vm=new Vue({
           el:'#app',
           data: {},
           methods: {},
           router,
           watch: {
               '$route.path': function(newVal, oldVal){
                //    console.log(newVal + ' --- ' + oldVal)
                   if (newVal === '/login') {
                     console.log('欢迎进入登录界面')
                   } else if (newVal === '/register') {
                       console.log('欢迎进入注册界面')
                   }
               }
           }
        });
    </script>
</body>

</html>


computed 计算属性
----------------------------------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="js/vue.js"></script>
</head>

<body>
    <div id="app">

        <input type="text" v-model="firstname"> +
        <input type="text" v-model="lastname"> =
        <input type="text" v-model="fullname">

    </div>
    <script>
        var vm=new Vue({
           el:'#app',
           data: {
               firstname: '',
               lastname: ''
           },
           methods: {},
           computed: { // 在 computed 中，可以定义一些属性，这些属性，叫做 【计算属性】，计算属性的本质，就是一个方法，只不过，我们在使用这些计算属性的时候，是把它们的名称，直接当作属性来使用；并不会把计算属性，当作方法去调用；
              // 注意1：计算属性，在引用的时候，一定不要加 () 去调用，直接把它当作普通属性去使用就好了；
              // 注意2：只要计算属性，这个 function 内部，所用到的任何 data 中的数据发送了变化，就会立即重新计算这个计算属性的值
              // 注意3：计算属性的求值结果，会被缓存起来，方便下次直接使用；如果计算属性方法中，所以来的任何数据，都没有发生过变化，则，不会重新对计算属性求值；

              'fullname': function () {
                  console.log('ok')
                  return this.firstname + '-' + this.lastname
              }

           }
        });
    </script>
</body>

</html>
